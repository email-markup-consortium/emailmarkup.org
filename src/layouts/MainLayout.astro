---
import HeadCommon from '@components/HeadCommon';
import HeadSEO from '@components/HeadSEO';
import Header from '@components/Header/Header';
import Body from '@components/Body';
import Footer from '@components/Footer/Footer';
import PageContent from '@components/PageContent/PageContent';
import LeftSidebar from '@components/LeftSidebar/LeftSidebar';
import RightSidebar from '@components/RightSidebar/RightSidebar';
import * as CONFIG from '../config';

import '../styles/theme.css';
import '../styles/index.css';

const { frontmatter = {}, headings } = Astro.props;
const onThisPageHeadings = frontmatter.customHeadings ?? headings;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const currentPage = Astro.url.pathname;

const filePath = frontmatter.file;
let currentFile, githubEditUrl, lastModifiedDate = null;

if(filePath) {
	currentFile = filePath.slice(filePath.indexOf('src/pages/'));
	githubEditUrl = CONFIG.GITHUB_EDIT_URL && CONFIG.GITHUB_EDIT_URL + currentFile;
	
	const githubResponse = await fetch(`https://api.github.com/repos/${CONFIG.GITHUB_REPO}/commits?path=${encodeURIComponent(currentFile)}&page=1&per_page=1`);
	const githubData = await githubResponse.json();
	lastModifiedDate = githubData.length ? new Date(githubData[0].commit.author.date) : null;
}

import SponsorRandom from '@components/Sponsors/SponsorRandom';
---

<html 
	dir={frontmatter.dir ?? 'ltr'}
	lang={frontmatter.lang ?? 'en-us'}
	class="initial"
	
	x-data="siteTheme"
	x-bind:class="{'theme-dark': theme == 'dark'}"
>
	<head>
		<HeadCommon />
		<HeadSEO {frontmatter} canonicalURL={canonicalURL} />
		<style>
			body {
				width: 100%;
				display: grid;
				grid-template-rows: minmax(var(--theme-navbar-height), auto) 1fr;
				--gutter: 0.5rem;
				--doc-padding: 2rem;
			}
			.layout {
				display: grid;
				grid-auto-flow: column;
				grid-template-columns:
					minmax(var(--gutter), 1fr)
					minmax(0, var(--max-width))
					minmax(var(--gutter), 1fr);
				overflow-x: hidden;
			}
			.layout :global(> *) {
				width: 100%;
				height: 100%;
			}
			.grid-sidebar {
				height: 100vh;
				position: sticky;
				top: 0;
				padding: 0;
			}
			#grid-left {
				position: fixed;
				background-color: var(--theme-bg);
				z-index: 10;
				display: none;
			}
			#grid-main {
				padding: var(--doc-padding) var(--gutter);
				grid-column: 2;
				display: flex;
				flex-direction: column;
				height: 100%;
			}
			#grid-right {
				display: none;
			}
			:global(.mobile-sidebar-toggle) {
				overflow: hidden;
			}
			:global(.mobile-sidebar-toggle) #grid-left {
				display: block;
				top: 3rem;
			}
			@media (min-width: 50em) {
				.layout {
					overflow: initial;
					grid-template-columns:
						20rem
						minmax(0, var(--max-width));
					gap: 1em;
				}
				#grid-left {
					display: flex;
					padding-left: 2rem;
					position: sticky;
					grid-column: 1;
				}
			}

			@media (min-width: 72em) {
				.layout {
					grid-template-columns:
						20rem
						minmax(0, var(--max-width))
						18rem;
					padding-left: 0;
					padding-right: 0;
					margin: 0 auto;
				}
				#grid-right {
					grid-column: 3;
					display: block;
				}
			}
		</style>
	</head>

	<Body>
		<Header {currentPage} {frontmatter} includeSidebarToggle=true />

		<main class="layout">
			<aside id="grid-left" class="grid-sidebar" title="Site Navigation">
				<LeftSidebar {currentPage} {frontmatter} />
			</aside>
			<div id="grid-main">
				<PageContent {frontmatter} headings={onThisPageHeadings} {githubEditUrl} {lastModifiedDate}>
					<slot />
				</PageContent>
			</div>
			<aside id="grid-right" class="grid-sidebar" title="Table of Contents">
				<SponsorRandom />
				<RightSidebar headings={onThisPageHeadings} {githubEditUrl} />
			</aside>
		</main>

		<Footer />
	</Body>
</html>
